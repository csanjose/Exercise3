cacheSolve(x)
## Calculates inverse of a matrix and cache the value
## Next time when inverse is called, function first checks if matrix has changed.
## if Matrix has changed it calculates inverse and cache value
## If Matrix has not changed it gets cached value and display
## This function return a list with function to set and get matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
inverse<-NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(matrixI) inverse <<- matrixI
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This functions returns matrix inverse. It first checks if inverse is cached and matrix
# has not changed. Recomputes inverse
## if inverse does not exist or if matrix has changed
cacheSolve <- function(x, ...) {
inverse<-x$getinverse()
if(!identical(c,x$get())){ # If statement is checking if matrix has changed
message("inside")
x<<-makeCacheMatrix(c)
x$set(c)
data<-x$get()
inverse<-solve(data)
x$setinverse(inverse)
return(inverse)
}
if(!is.null(inverse)){
inverse<-x$getinverse()
message("getting cached matrix inverse")
return(inverse)
}
data<-x$get()
inverse<-solve(data)
x$setinverse(inverse)
inverse
}
c=matrix(1:4,2,2)
x=makeCacheMatrix(c)
x
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
c=matrix(1:4,2,2)
cacheSolve(x)
cachesolve(c)
cacheSolve(c)
x$get()
c
x=makeCacheMatrix(matrix(1:4,2,2))
x$get()
c
x=makeCacheMatrix(matrix(2:5,2,2))
x$get()
c
cacheSolve(x)
creatematrix <- function (min, max, size) {
# Function that creates a square matrix
# between min and max with size row and size columns
valor=as.integer(runif(size^2, min, max+1))
matrix(valor, nrow=size, ncol=size)
}
c=creatematrix(2,6,4)
c
apply(c,1,sum)
apply(c,2,sum)
apply(c,c(1,2),sum)
sum(c)
sum[c[1]]
c
c[1]
c[1,]
c[2,]
sum(c[2,])
data.frame(c)
d=data.frame(c)
d(rownames=(c("uno", "dos", "tres", "cuatro")))
rownames=(d,c("uno", "dos", "tres", "cuatro")))
rownames=(d,c("uno", "dos", "tres", "cuatro"))
?rownames
rownames(d)<-c("uno","dos","tres","cuatro")
d
myVec = c( "NY", "NJ", "DC", "VA", "TN", "UT")
"MD" %in% myVec
"TN" %in% myVec
x=c(1,2,4,5,6,7)
2 %in% x
0 %in% x
true %in% x
c=matrix(1:6,2,3)
c
4 %in% c
4 %in% c[1,]
4 %in% c[2,]
4 %in% c[3,]
4 %in% c[,1]
4 %in% c[,2]
4 %in% c[,3]
?any
str(any)
any()
any(4,c)
any(c=4)
any(c==4)
!any(c==4)
any(c[1,]==4)
any(c[2,]==4)
any(c==4&c==5)
any(c==4|c==5)
c
any(c==4&c==5)
any(c==4&&c==5)
any(c==4 & c==5)
any(c==4,c==5)
any(c==4,c==0)
d=c
d
any(c(d==4, d==5))
any(c(d==4, d==0))
any(c(d==4, d==1))
4 %in% d
4&5 %in% d
4&0 %in% d
c(1,4) %in% d
c(0,4) %in% d
all(d==4, d==0)
any(d==4, d==0)
all(d==4, d==0, d==3)
all(d==4, d==1, d==3)
d
all(c(d==4, d==1, d==3)
)
any(d==6)
d=1
d
d=matrix(1:6, 2,3)
d
d==1
d[d==1]
d[d==2]
d[d==3]
d[d==3,]
d[d[]==3]
d==3
which(d==4, arr.ind=T)
which(d==4, arr.ind=T)[1]
which(d==4, arr.ind=T)[2]
which(d==4, arr.ind=T)[0]
which(d==4, arr.ind=T)[3]
4&5 %in% d
4&0 %in% d
DIR
dir()
dir(full.names=T)
getwd()
dir(getwd(), full.names=TRUE)
a<-matrix(c(1,4,5,3,,7,,9,3),3,3)
a<-matrix(c(1,4,5,3,NA,7,NA,9,3),3,3)
a
complete.cases(a)
a[complete.cases(a)]
a[complete.cases(a[2])]
a[complete.cases(a[,2])]
a[complete.cases(a[2,])]
a[,2]
complete.cases(a[,2])
a[,complete.cases(a[,2])]
a[complete.cases(a[,2])]
a[complete.cases(a[,2]),]
a[complete.cases(a),]
a[2,]
a[,2]
a[complete.cases(a[,2])]
a[complete.cases(a[,2]),]
a[,complete.cases(a[,2])]
na.omit(a)
a<-data.frame(a)
a
a[x2]
a$X2
a$X2[complete.cases(a$X2)]
complete.cases(a$X2)
rownames(a)
rownames(a)=c("uno", "dos", "tres")
rownames(a)
a
rownames(a)=("uno", "dos", "tres")
colnames(a)=c("uno","dos","tres")
a
a$uno
a[uno]
a["uno"]
a[,"uno"]
a["uno",]
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(datos4[3]),]
# Adds column with rank
datos6 <- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
rankhospital("TX","heart failure",4)
rankhospital("TX","heart failure",4)
getwd()
setwd("~/GitHub/Exercise3")
rankhospital("TX","heart failure",4)
rankhospital("TX","heart failure","worst")
datos <- read.csv("outcome-of-care-measures.csv")datos
datos <- read.csv("outcome-of-care-measures.csv")
View(datos)
datos <- read.csv("outcome-of-care-measures.csv")
datos2 <- subset(datos, datos$State=="TX")
datos3 <- datos2[c(2,7,11)]
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
datos5 <- datos4[order(datos4[3]),]
datos5
datos3 <- datos2[c(2,7,17)]
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
datos5 <- datos4[order(datos4[3]),]
datos5
datos5
datos <- read.csv("outcome-of-care-measures.csv")
datos2 <- subset(datos, datos$State=="TX")
datos3 <- datos2[c(2,7,columna)]
datos3 <- datos2[c(2,7,17)]
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
datos5 <- datos4[order(datos4[3]),]
datos5
datos6 <- cbind(datos5, "Rank"=1:length(datos5[,1]))
datos6
as.character(datos6[294, "Hospital.Name"])
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(datos4[3]),]
# Adds column with rank
datos6 <- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
rankhospital("TX", "heart failure", "worst")
datos4[3,]
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(datos4[3]),]
# Adds column with rank
datos6 <<- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
datos6
rankhospital("TX", "heart failure", "worst")
datos6
class(datos6)
class(datos6[2,])
class(datos6[3,])
(datos6[3,])
class(datos6[,3])
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(as.numeric(as.character(datos4[3]))),]
# Adds column with rank
datos6 <<- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
rankhospital("TX", "heart failure", "worst")
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(as.numeric(as.character(datos4[,3]))),]
# Adds column with rank
datos6 <<- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
rankhospital("TX", "heart failure", "worst")
rankhospital("TX", "heart failure", "best")
rankhospital("TX", "heart failure", 2)
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(datos4[,3]),]
# Adds column with rank
datos6 <<- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
rankhospital("TX", "heart failure", 2)
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(as.numeric(as.character(datos4[,3])),]
# Adds column with rank
datos6 <<- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(as.numeric(as.character(datos4[,3]))),]
# Adds column with rank
datos6 <<- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
rankhospital("TX", "heart failure", 2)
datos <- read.csv("outcome-of-care-measures.csv")
datos2 <- subset(datos, datos$State=="TX")
datos3 <- datos2[c(2,7,17)]
datos3[3]
rankhospital <- function(state, outcome, num = "best") {
if (outcome=="heart attack") {
columna=11}
else if (outcome=="heart failure") {
columna=17}
else if (outcome=="pneumonia") {
columna=23}
else stop('invalid outcome')
# Read file
datos <- read.csv("outcome-of-care-measures.csv")
if(!any(state == datos$State)) stop('invalid state')
# Extract data frame that matches State
datos2 <- subset(datos, datos$State==state)
# For managing purposes i select only necessary columns
datos3 <- datos2[c(2,7,columna)]
# Eliminate NA
datos4 <- datos3[which(datos3[3] != "Not Available"), ]
# Sort by 'columna'
datos5 <- datos4[order(as.numeric(as.character(datos4[3]))),]
# Adds column with rank
datos6 <- cbind(datos5, "Rank"=1:length(datos5[,1]))
if (num=="best") {
pos=1}
else if (num=="worst") {
pos=length(datos5[,1])}
else pos=num
# Returns hospital
as.character(datos6[pos, "Hospital.Name"])
}
rankhospital("TX", "heart failure", 2)
